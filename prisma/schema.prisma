generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model administrator {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  first_name      String        @db.VarChar(255)
  last_name       String        @db.VarChar(255)
  email           String        @unique @db.VarChar(255)
  password        String        @db.VarChar(255)
  organization_id String?       @db.Uuid
  created_at      DateTime      @default(now()) @db.Timestamp(6)
  updated_at      DateTime      @default(now()) @db.Timestamp(6)
  organization    organization? @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model cron_job {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String        @db.VarChar(255)
  frequency       String        @db.VarChar(255)
  timing          DateTime      @db.Timestamp(6)
  parameters      String        @db.VarChar(255)
  organization_id String?       @db.Uuid
  created_at      DateTime      @default(now()) @db.Timestamp(6)
  updated_at      DateTime      @default(now()) @db.Timestamp(6)
  organization    organization? @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model invite {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email           String        @db.VarChar(255)
  role            String        @db.VarChar(255)
  status          String        @db.VarChar(255)
  organization_id String?       @db.Uuid
  user_id         String?       @db.Uuid
  created_at      DateTime      @default(now()) @db.Timestamp(6)
  updated_at      DateTime      @default(now()) @db.Timestamp(6)
  organization    organization? @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user            user?         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model organization {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description   String?         @db.VarChar(255)
  name          String          @db.VarChar(255)
  created_at    DateTime        @default(now()) @db.Timestamp(6)
  updated_at    DateTime        @default(now()) @db.Timestamp(6)
  user_id       String          @db.Uuid
  tenant_id     String          @db.VarChar(255)
  administrator administrator[]
  cron_job      cron_job[]
  invite        invite[]
  user          user            @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  owner         owner[]
}

model owner {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  first_name      String        @db.VarChar(255)
  last_name       String        @db.VarChar(255)
  email           String        @unique @db.VarChar(255)
  password        String        @db.VarChar(255)
  organization_id String?       @db.Uuid
  created_at      DateTime      @default(now()) @db.Timestamp(6)
  updated_at      DateTime      @default(now()) @db.Timestamp(6)
  organization    organization? @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String         @unique @db.VarChar(255)
  firstName    String?        @db.VarChar(255)
  lastName     String?        @db.VarChar(255)
  roq_user_id  String         @db.VarChar(255)
  tenant_id    String         @db.VarChar(255)
  created_at   DateTime       @default(now()) @db.Timestamp(6)
  updated_at   DateTime       @default(now()) @db.Timestamp(6)
  invite       invite[]
  organization organization[]
}
